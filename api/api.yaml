openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker News** deployed at <https://hacker-news-fib.herokuapp.com/>. <br>All operations are executable. Only one operation requires authentication: `deleteTweet`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the tweet."
servers:
  - url: 'https://hacker-news-fib.herokuapp.com/'
paths:
  /tweets:
    post:
      tags:
      - tweets
      summary: Adds a new Tweet to the Wall of Tweets
      operationId: addTweet
      requestBody:
        description: Provide the author & content of the new Tweet
        content:
          application/json:
            schema:
              required:
              - author
              - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Tweet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTweetResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
    get:
      tags:
      - tweets
      summary: Retrieves all the Tweets
      operationId: getAllTweets
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
  /user/{userId}:
    get:
      tags:
      - users
      summary: Finds User by its Id
      description: Return the User
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: ID of User to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          #content:
            #application/json:
              #schema:
              #  $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    #put:
    #  tags:
    #  - users
    #  summary: Updates a User
    #  operationId: updateUser
    #  parameters:
    #  - name: userId
    #    in: path
    #    description: User id to update
    #    required: true
    #    schema:
    #      type: integer
    #      format: int64
    #  responses:
    #    200:
    #      description: User updated
    #      content:
    #        application/json:
    #          schema:
    #          #  $ref: '#/components/schemas/User'
    #    404:
    #      description: 'Error: Not Found'
    #      content:
    #        application/json:
    #          schema:
    #            $ref: '#/components/schemas/ErrorResult'
    #          examples:
    #            errorExample:
    #              $ref: '#/components/examples/error404'
    #    401:
    #      description: 'Error: Unauthorized'
    #      content:
    #        application/json:
    #          schema:
    #            $ref: '#/components/schemas/ErrorResult'
    #          examples:
    #            errorExample:
    #              $ref: '#/components/examples/error401'
    #    403:
    #      description: 'Error: Forbidden'
    #      content:
    #        application/json:
    #          schema:
    #            $ref: '#/components/schemas/ErrorResult'
    #          examples:
    #            errorExample:
    #              $ref: '#/components/examples/error403'
    #  security:
    #  - ApiKeyAuth: []
  /comments/:id:
    get:
      tags:
      - comments
      summary: Finds Comment by its Id
      description: Return the Comment
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    #post:
    #  tags:
    #  - tweets
    #  summary: Likes a Tweet
    #  operationId: likeTweet
    #  parameters:
    #  - name: tweetId
    #    in: path
    #    description: Tweet id to like
    #    required: true
    #    schema:
    #      type: integer
    #      format: int64
    #  responses:
    #    200:
    #      description: Liked Tweet
    #      content:
    #        application/json:
    #          schema:
    #            $ref: '#/components/schemas/Tweet'
    #    404:
    #     description: 'Error: Not Found'
    #      content:
    #        application/json:
    #          schema:
    #            $ref: '#/components/schemas/ErrorResult'
    #          examples:
    #            errorExample:
    #              $ref: '#/components/examples/error404'
  /replies/:id:
    get:
      tags:
      - replies
      summary: Finds Reply by its Id
      description: Return the Reply
      operationId: getReplyById
      parameters:
      - name: replyId
        in: path
        description: ID of Reply to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
    Reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
    Tweet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        author:
          type: string
          minLength: 4
          example: 'My name'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw-api-demo.herokuapp.com/tweets/2'
    AddTweetResult:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Tweet'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Tweet with that ID"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header