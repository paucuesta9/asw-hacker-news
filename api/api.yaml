openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker News** deployed at <https://hacker-news-fib.herokuapp.com/>. <br>All operations are executable. Only one operation requires authentication: `deleteTweet`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the tweet."
servers:
  - url: 'http://127.0.0.1:3000/api/v1/'
paths:
  /posts:
    post:
      tags:
        - posts
      summary: Creates a new Post
      description: Creates a new Post and returns its info
      operationId: newPost
      requestBody:
        description: Provide the title & content of the new Post
        content:
          application/json:
            schema:
              required:
              - title
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  example: 'My name'
                url:
                  type: string
                  format: url
                  example: 'https://www.github.com'
                text:
                  type: string
                  minLength: 4
                  example: 'My text'
        required: true
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPostResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - ApiKeyAuth: []
      
  /posts/{postId}:
    get:
      tags:
      - posts
      summary: Finds Post by its Id
      description: Return the Post
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        description: ID of Post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
    put:
      tags:
        - posts
      summary: Updates Post by its Id
      description: Update the Post with the new info
      parameters:
        - name: postId
          in: path
          description: Post id to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - posts
      summary: Deletes Post by its Id
      description: Delete the Post
      parameters:
        - name: postId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Post removed
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          minLength: 4
          example: 'Post Title'
        url:
          type: string
          format: url
          example: 'https::www.github.com'
        text:
          type: string
          minLength: 4
          example: 'Post text'
        points:
          type: integer
          format: int64
          example: 5
        userId:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
    AddPostResult:
      type: object
      properties:
        new_post:
          $ref: '#/components/schemas/Post'
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is empty"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404Post:
      value:
        status: 404
        error: "Not Found"
        message: "No Post with that ID"
    error409:
      value:
        status: 409
        error: "Conflict"
        message: "Post with the same url already created"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header