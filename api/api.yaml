openapi: 3.0.1  
info:
  version: 1.0.0
  title: Hacker News
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker News** deployed at <https://hacker-news-fib.herokuapp.com/>."
servers:
  - url: 'https://hacker-news-fib.herokuapp.com/api/v1/'
paths:
    
  ### /POSTS
  /posts:
    get:
      tags:
        - posts
      summary: Finds Posts
      description: Return the Posts
      operationId: getPosts
      parameters:
      - name: user_id
        in: query
        description: ID of the user
        schema:
          type: integer
          format: int64
      - name: order_by
        in: query
        description: Type of ordering
        schema:
          type: string
      - name: reply_id
        in: query
        description: ID of the reply
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400Order'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorUser:
                  $ref: '#/components/examples/error404User'
                errorReply:
                  $ref: '#/components/examples/error404Reply'
                  
    post:
      tags:
        - posts
      summary: Creates a new Post
      description: Creates a new Post and returns its info
      operationId: newPost
      requestBody:
        description: Provide the title & content of the new Post
        content:
          application/json:
            schema:
              required:
              - title
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  example: 'My name'
                url:
                  type: string
                  format: url
                  example: 'https://www.github.com'
                text:
                  type: string
                  minLength: 4
                  example: 'My text'
        required: true
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPostResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - ApiKeyAuth: []

  ### /POSTS/:ID
  /posts/{postId}:
    get:
      tags:
      - posts
      summary: Finds Post by its Id
      description: Return the Post
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        description: ID of Post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
    put:
      tags:
        - posts
      summary: Updates Post by its Id
      description: Update the Post with the new info
      operationId: updatePostById
      parameters:
        - name: postId
          in: path
          description: Post id to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Provide the title & content of the updated Post
        content:
          application/json:
            schema:
              required:
              - title
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  example: 'My name'
                url:
                  type: string
                  format: url
                  example: 'https://www.github.com'
                text:
                  type: string
                  minLength: 4
                  example: 'My text'
        required: true
      responses:
        200:
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - ApiKeyAuth: []

    delete:
      tags:
        - posts
      summary: Deletes Post by its Id
      description: Delete the Post
      operationId: deletePostById
      parameters:
        - name: postId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Post removed
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
      

  ### POSTS/:ID/VOTE
  /posts/{postId}/vote:
    post:
      tags:
        - posts
        - votes
      summary: Vote a Post
      description: Vote a Post
      operationId: votePost
      parameters:
      - name: postId
        in: path
        description: ID of Post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        201:
          description: Vote done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409Vote'
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - posts
        - votes
      summary: Unvote a Post
      description: Unvote a Post
      operationId: unvotePost
      parameters:
      - name: postId
        in: path
        description: ID of Post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Unvote done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409Unvote'
      security:
        - ApiKeyAuth: []    
  
  /posts/upvoted:
    get:
      tags:
        - posts
      summary: Finds Posts Upvoted by a User
      description: Return the Posts Upvoted by a User
      operationId: getPostsUpvoted
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
          - ApiKeyAuth: []    
     
  ### USER/:ID
  /users:
    post:
      tags:
        - users
      summary: create a new user
      description: Create a new user
      operationId: createUser
      responses:
        200:
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409User'
    put:
      tags:
        - users
      summary: Update a user
      description: Update a user
      operationId: updateUser
      requestBody:
        description: Provide the new about of the user
        content:
          application/json:
            schema:
              required:
              - about
              type: object
              properties:
                about:
                  type: string
                  minLength: 0
                  example: 'Something about the user'
        required: true
      responses:
        200:
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorUser:
                  $ref: '#/components/examples/error404User'
      security:
        - ApiKeyAuth: []
  /users/{userId}:
    get:
      tags:
      - users
      summary: Finds User by its id
      description: Return the User
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: ID of the user to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404User'

  ### COMMENTS
  /comments:
    get:
      tags:
        - comments
      summary: Finds Comments
      description: Return the Comments
      operationId: getComments
      parameters:
      - name: post_id
        in: query
        description: ID of the Post
        schema:
          type: integer
          format: int64
      - name: user_id
        in: query
        description: ID of the User
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorPost:
                  $ref: '#/components/examples/error404Post'
                errorUser:
                  $ref: '#/components/examples/error404User'
    post:
      tags:
        - comments
      summary: Creates a new Comment
      description: Creates a new Comment and returns its info
      operationId: newComment
      requestBody:
        description: Provide the text and postId of the new Comment
        content:
          application/json:
            schema:
              required:
              - text
              - post_id
              type: object
              properties:
                text:
                  type: string
                  minLength: 4
                  example: 'My text'
                post_id:
                  type: integer
                  format: int64
                  example: 2
        required: true
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
      security:
        - ApiKeyAuth: []

  /comments/{commentId}:
    get:
      tags:
      - comments
      summary: Finds Comment by its Id
      description: Return the Comment
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Comment'
    put:
      tags:
        - comments
      summary: Updates Comment by its Id
      description: Update the Comment with the new info
      operationId: updateCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Provide the text of the updated Comment
        content:
          application/json:
            schema:
              required:
              - text
              type: object
              properties:
                text:
                  type: string
                  minLength: 4
                  example: 'My text'
        required: true
      responses:
        200:
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Comment'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - comments
      summary: Deletes Comment by its Id
      description: Delete the Comment
      operationId: deleteCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Comment removed
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorUser:
                  $ref: '#/components/examples/error404User'
                errorExample:
                  $ref: '#/components/examples/error404Comment'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /comments/upvoted:
    get:
      tags:
        - comments
        - replies
      summary: Finds Comments and Replies Upvoted by a User
      description: Return the Comments and Replies Upvoted by a User
      operationId: getCommentsUpvoted
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReplyList'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
          - ApiKeyAuth: []   
  /comments/{commentId}/vote:
    post:
      tags:
        - votes
        - comments
      summary: Vote a Comment
      description: Vote a Comment
      operationId: voteComment
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to vote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        201:
          description: Vote done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Comment'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409Vote'
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - comments
        - votes
      summary: Unvote a Comment
      description: Unvote a Comment
      operationId: unvoteComment
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to unvote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Unvote done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Post'
        409:
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409Unvote'
      security:
        - ApiKeyAuth: []
  
  ### REPLIES
  /replies:
    get:
      tags:
        - replies
      summary: Finds Replies of a Comment or Reply
      description: Return the Replies of a Comment or Reply
      operationId: getReplies
      parameters:
      - name: parent_id
        in: query
        description: ID of the parent
        required: true
        schema:
          type: integer
          format: int64
      - name: parent_type
        in: query
        description: Type of parent
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplyList'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorComment:
                  $ref: '#/components/examples/error404Comment'
                errorReply:
                  $ref: '#/components/examples/error404Reply'

    post:
      tags:
        - replies
      summary: Creates a new Reply
      description: Creates a new Reply and returns its info
      operationId: newReply
      requestBody:
        description: Provide the info of a Reply to create
        content:
          application/json:
            schema:
              required:
              - text
              - parent_id
              - parent_type
              type: object
              properties:
                text:
                  type: string
                  minLength: 4
                  example: 'My text'
                parent_id:
                  type: integer
                  format: int64
                  example: 2
                parent_type:
                  type: string
                  minLength: 4
                  example: 'Comment'
        required: true
      responses:
        201:
          description: Reply created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddReplyResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
        - ApiKeyAuth: []
  /replies/{replyId}:
    get:
      tags:
      - replies
      summary: Finds Reply by its Id
      description: Return the Reply
      operationId: getReplyById
      parameters:
      - name: replyId
        in: path
        description: ID of Reply to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Reply'
    put:
      tags:
        - replies
      summary: Updates Reply by its Id
      description: Update the Reply with the new info
      operationId: updateReplyById
      parameters:
        - name: replyId
          in: path
          description: Reply id to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Provide the info of a Reply to create
        content:
          application/json:
            schema:
              required:
              - text
              type: object
              properties:
                text:
                  type: string
                  minLength: 4
                  example: 'My text'
        required: true
      responses:
        200:
          description: Reply updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Reply'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - replies
      summary: Deletes Reply by its Id
      description: Delete the Reply
      operationId: deleteReplyById
      parameters:
        - name: replyId
          in: path
          description: Reply id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Post removed
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404Reply'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /replies/{replyId}/vote:
      post:
        tags:
          - votes
          - replies
        summary: Vote a Reply
        description: Vote a Reply
        operationId: voteReply
        parameters:
        - name: replyId
          in: path
          description: ID of Reply to vote
          required: true
          schema:
            type: integer
            format: int64
        responses:
          201:
            description: Vote done
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Reply'
          401:
            description: 'Error: Unauthorized'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error401'
          403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error403'
          404:
            description: 'Error: Not Found'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error404Reply'
          409:
            description: 'Error: Conflict'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error409Vote'
        security:
          - ApiKeyAuth: []
      delete:
        tags:
          - replies
          - votes
        summary: Unvote a Reply
        description: Unvote a Reply
        operationId: unvoteReply
        parameters:
        - name: replyId
          in: path
          description: ID of Reply to unvote
          required: true
          schema:
            type: integer
            format: int64
        responses:
          204:
            description: Unvote done
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Reply'
          401:
            description: 'Error: Unauthorized'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error401'
          403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error403'
          404:
            description: 'Error: Not Found'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error404Post'
          409:
            description: 'Error: Conflict'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error409Unvote'
        security:
          - ApiKeyAuth: []

### COMPONENTS
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          minLength: 4
          example: 'Post Title'
        url:
          type: string
          format: url
          example: 'https::www.github.com'
        text:
          type: string
          minLength: 4
          example: 'Post text'
        points:
          type: integer
          format: int64
          example: 5
        user_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
    PostList:
      type: array
      items:
        $ref: '#/components/schemas/Post'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        username:
          type: string
          example: 'someUserName'
        about:
          type: string
          example: 'somthing about the user'
        created_at:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        text:
          type: string
          minLength: 4
          example: 'Comment Text'
        votes:
          type: integer
          format: int64
          example: 5
        user_id:
          type: integer
          format: int64
          example: 3
        post_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
    CommentList:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        text:
          type: string
          minLength: 4
          example: 'Reply Text'
        votes:
          type: integer
          format: int64
          example: 5
        user_id:
          type: integer
          format: int64
          example: 3
        parent_id:
          type: integer
          format: int64
          example: 1
        parent_type:
          type: string
          minLength: 4
          example: 'Comment'
        created_at:
          type: string
          format: date-time
    ReplyList:
      type: array
      items:
        $ref: '#/components/schemas/Reply'
    CommentReplyList:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/Comment'
          - $ref: '#/components/schemas/Reply'
    AddPostResult:
      type: object
      properties:
        new_post:
          $ref: '#/components/schemas/Post'
    AddCommentResult:
      type: object
      properties:
        new_comment:
          $ref: '#/components/schemas/Comment'
    AddReplyResult:
      type: object
      properties:
        new_reply:
          $ref: '#/components/schemas/Reply'
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is empty"
    error400Order:
      value:
        status: 400
        error: "Bad Request"
        message: "Ordering not valid"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404Comment:
      value:
        status: 404
        error: "Not Found"
        message: "No Comment with that ID"
    error404Reply:
      value:
        status: 404
        error: "Not Found"
        message: "No Reply with that ID"
    error404Post:
      value:
        status: 404
        error: "Not Found"
        message: "No Post with that ID"
    error404User:
      value:
        status: 404
        error: "Not Found"
        message: "No User with that ID"
    error409:
      value:
        status: 409
        error: "Conflict"
        message: "Post with the same url already created"
        post: 
          $ref: '#/components/schemas/Post'
    error409User:
      value:
        status: 409
        error: "Conflict"
        message: "User with the same uid already created"
    error409Vote:
      value:
        status: 409
        error: "Conflict"
        message: "Vote to the same Contribution already created"
    error409Unvote:
      value:
        status: 409
        error: "Conflict"
        message: "No Vote to the Contribution exists"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header